// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OrderCreated extends ethereum.Event {
  get params(): OrderCreated__Params {
    return new OrderCreated__Params(this);
  }
}

export class OrderCreated__Params {
  _event: OrderCreated;

  constructor(event: OrderCreated) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get otoken(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OrderFinished extends ethereum.Event {
  get params(): OrderFinished__Params {
    return new OrderFinished__Params(this);
  }
}

export class OrderFinished__Params {
  _event: OrderFinished;

  constructor(event: OrderFinished) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get cancelled(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AutoGamma__getExcessCollateralResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }
}

export class AutoGamma__getExcessCollateralInput_vaultStruct extends ethereum.Tuple {
  get shortOtokens(): Array<Address> {
    return this[0].toAddressArray();
  }

  get longOtokens(): Array<Address> {
    return this[1].toAddressArray();
  }

  get collateralAssets(): Array<Address> {
    return this[2].toAddressArray();
  }

  get shortAmounts(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get longAmounts(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get collateralAmounts(): Array<BigInt> {
    return this[5].toBigIntArray();
  }
}

export class AutoGamma__getOrderResultValue0Struct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get otoken(): Address {
    return this[1].toAddress();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get vaultId(): BigInt {
    return this[3].toBigInt();
  }

  get isSeller(): boolean {
    return this[4].toBoolean();
  }

  get toToken(): Address {
    return this[5].toAddress();
  }

  get fee(): BigInt {
    return this[6].toBigInt();
  }

  get finished(): boolean {
    return this[7].toBoolean();
  }
}

export class AutoGamma__getOrdersResultValue0Struct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get otoken(): Address {
    return this[1].toAddress();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get vaultId(): BigInt {
    return this[3].toBigInt();
  }

  get isSeller(): boolean {
    return this[4].toBoolean();
  }

  get toToken(): Address {
    return this[5].toAddress();
  }

  get fee(): BigInt {
    return this[6].toBigInt();
  }

  get finished(): boolean {
    return this[7].toBoolean();
  }
}

export class AutoGamma__getVaultResultValue0Struct extends ethereum.Tuple {
  get shortOtokens(): Array<Address> {
    return this[0].toAddressArray();
  }

  get longOtokens(): Array<Address> {
    return this[1].toAddressArray();
  }

  get collateralAssets(): Array<Address> {
    return this[2].toAddressArray();
  }

  get shortAmounts(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get longAmounts(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get collateralAmounts(): Array<BigInt> {
    return this[5].toBigIntArray();
  }
}

export class AutoGamma__getVaultOtokenByVaultInput_vaultStruct extends ethereum.Tuple {
  get shortOtokens(): Array<Address> {
    return this[0].toAddressArray();
  }

  get longOtokens(): Array<Address> {
    return this[1].toAddressArray();
  }

  get collateralAssets(): Array<Address> {
    return this[2].toAddressArray();
  }

  get shortAmounts(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get longAmounts(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get collateralAmounts(): Array<BigInt> {
    return this[5].toBigIntArray();
  }
}

export class AutoGamma__getVaultWithDetailsResultValue0Struct extends ethereum.Tuple {
  get shortOtokens(): Array<Address> {
    return this[0].toAddressArray();
  }

  get longOtokens(): Array<Address> {
    return this[1].toAddressArray();
  }

  get collateralAssets(): Array<Address> {
    return this[2].toAddressArray();
  }

  get shortAmounts(): Array<BigInt> {
    return this[3].toBigIntArray();
  }

  get longAmounts(): Array<BigInt> {
    return this[4].toBigIntArray();
  }

  get collateralAmounts(): Array<BigInt> {
    return this[5].toBigIntArray();
  }
}

export class AutoGamma__getVaultWithDetailsResult {
  value0: AutoGamma__getVaultWithDetailsResultValue0Struct;
  value1: BigInt;
  value2: BigInt;

  constructor(
    value0: AutoGamma__getVaultWithDetailsResultValue0Struct,
    value1: BigInt,
    value2: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class AutoGamma__ordersResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;
  value5: Address;
  value6: BigInt;
  value7: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: boolean,
    value5: Address,
    value6: BigInt,
    value7: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    return map;
  }
}

export class AutoGamma extends ethereum.SmartContract {
  static bind(address: Address): AutoGamma {
    return new AutoGamma("AutoGamma", address);
  }

  addressBook(): Address {
    let result = super.call("addressBook", "addressBook():(address)", []);

    return result[0].toAddress();
  }

  try_addressBook(): ethereum.CallResult<Address> {
    let result = super.tryCall("addressBook", "addressBook():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  automator(): Address {
    let result = super.call("automator", "automator():(address)", []);

    return result[0].toAddress();
  }

  try_automator(): ethereum.CallResult<Address> {
    let result = super.tryCall("automator", "automator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  automatorTreasury(): Address {
    let result = super.call(
      "automatorTreasury",
      "automatorTreasury():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_automatorTreasury(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "automatorTreasury",
      "automatorTreasury():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  calculator(): Address {
    let result = super.call("calculator", "calculator():(address)", []);

    return result[0].toAddress();
  }

  try_calculator(): ethereum.CallResult<Address> {
    let result = super.tryCall("calculator", "calculator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  controller(): Address {
    let result = super.call("controller", "controller():(address)", []);

    return result[0].toAddress();
  }

  try_controller(): ethereum.CallResult<Address> {
    let result = super.tryCall("controller", "controller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getExcessCollateral(
    _vault: AutoGamma__getExcessCollateralInput_vaultStruct,
    _typeVault: BigInt
  ): AutoGamma__getExcessCollateralResult {
    let result = super.call(
      "getExcessCollateral",
      "getExcessCollateral((address[],address[],address[],uint256[],uint256[],uint256[]),uint256):(uint256,bool)",
      [
        ethereum.Value.fromTuple(_vault),
        ethereum.Value.fromUnsignedBigInt(_typeVault)
      ]
    );

    return new AutoGamma__getExcessCollateralResult(
      result[0].toBigInt(),
      result[1].toBoolean()
    );
  }

  try_getExcessCollateral(
    _vault: AutoGamma__getExcessCollateralInput_vaultStruct,
    _typeVault: BigInt
  ): ethereum.CallResult<AutoGamma__getExcessCollateralResult> {
    let result = super.tryCall(
      "getExcessCollateral",
      "getExcessCollateral((address[],address[],address[],uint256[],uint256[],uint256[]),uint256):(uint256,bool)",
      [
        ethereum.Value.fromTuple(_vault),
        ethereum.Value.fromUnsignedBigInt(_typeVault)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AutoGamma__getExcessCollateralResult(
        value[0].toBigInt(),
        value[1].toBoolean()
      )
    );
  }

  getOrder(_orderId: BigInt): AutoGamma__getOrderResultValue0Struct {
    let result = super.call(
      "getOrder",
      "getOrder(uint256):((address,address,uint256,uint256,bool,address,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(_orderId)]
    );

    return result[0].toTuple() as AutoGamma__getOrderResultValue0Struct;
  }

  try_getOrder(
    _orderId: BigInt
  ): ethereum.CallResult<AutoGamma__getOrderResultValue0Struct> {
    let result = super.tryCall(
      "getOrder",
      "getOrder(uint256):((address,address,uint256,uint256,bool,address,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(_orderId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as AutoGamma__getOrderResultValue0Struct
    );
  }

  getOrders(): Array<AutoGamma__getOrdersResultValue0Struct> {
    let result = super.call(
      "getOrders",
      "getOrders():((address,address,uint256,uint256,bool,address,uint256,bool)[])",
      []
    );

    return result[0].toTupleArray<AutoGamma__getOrdersResultValue0Struct>();
  }

  try_getOrders(): ethereum.CallResult<
    Array<AutoGamma__getOrdersResultValue0Struct>
  > {
    let result = super.tryCall(
      "getOrders",
      "getOrders():((address,address,uint256,uint256,bool,address,uint256,bool)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<AutoGamma__getOrdersResultValue0Struct>()
    );
  }

  getOrdersLength(): BigInt {
    let result = super.call(
      "getOrdersLength",
      "getOrdersLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getOrdersLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOrdersLength",
      "getOrdersLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOtokenCollateral(_otoken: Address): Address {
    let result = super.call(
      "getOtokenCollateral",
      "getOtokenCollateral(address):(address)",
      [ethereum.Value.fromAddress(_otoken)]
    );

    return result[0].toAddress();
  }

  try_getOtokenCollateral(_otoken: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOtokenCollateral",
      "getOtokenCollateral(address):(address)",
      [ethereum.Value.fromAddress(_otoken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRedeemPayout(_otoken: Address, _amount: BigInt): BigInt {
    let result = super.call(
      "getRedeemPayout",
      "getRedeemPayout(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_otoken),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getRedeemPayout(
    _otoken: Address,
    _amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedeemPayout",
      "getRedeemPayout(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_otoken),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRedeemableAmount(
    _owner: Address,
    _otoken: Address,
    _amount: BigInt
  ): BigInt {
    let result = super.call(
      "getRedeemableAmount",
      "getRedeemableAmount(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_otoken),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_getRedeemableAmount(
    _owner: Address,
    _otoken: Address,
    _amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRedeemableAmount",
      "getRedeemableAmount(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_otoken),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVault(
    _owner: Address,
    _vaultId: BigInt
  ): AutoGamma__getVaultResultValue0Struct {
    let result = super.call(
      "getVault",
      "getVault(address,uint256):((address[],address[],address[],uint256[],uint256[],uint256[]))",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_vaultId)
      ]
    );

    return result[0].toTuple() as AutoGamma__getVaultResultValue0Struct;
  }

  try_getVault(
    _owner: Address,
    _vaultId: BigInt
  ): ethereum.CallResult<AutoGamma__getVaultResultValue0Struct> {
    let result = super.tryCall(
      "getVault",
      "getVault(address,uint256):((address[],address[],address[],uint256[],uint256[],uint256[]))",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_vaultId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as AutoGamma__getVaultResultValue0Struct
    );
  }

  getVaultOtoken(_owner: Address, _vaultId: BigInt): Address {
    let result = super.call(
      "getVaultOtoken",
      "getVaultOtoken(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_vaultId)
      ]
    );

    return result[0].toAddress();
  }

  try_getVaultOtoken(
    _owner: Address,
    _vaultId: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getVaultOtoken",
      "getVaultOtoken(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_vaultId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getVaultOtokenByVault(
    _vault: AutoGamma__getVaultOtokenByVaultInput_vaultStruct
  ): Address {
    let result = super.call(
      "getVaultOtokenByVault",
      "getVaultOtokenByVault((address[],address[],address[],uint256[],uint256[],uint256[])):(address)",
      [ethereum.Value.fromTuple(_vault)]
    );

    return result[0].toAddress();
  }

  try_getVaultOtokenByVault(
    _vault: AutoGamma__getVaultOtokenByVaultInput_vaultStruct
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getVaultOtokenByVault",
      "getVaultOtokenByVault((address[],address[],address[],uint256[],uint256[],uint256[])):(address)",
      [ethereum.Value.fromTuple(_vault)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getVaultWithDetails(
    _owner: Address,
    _vaultId: BigInt
  ): AutoGamma__getVaultWithDetailsResult {
    let result = super.call(
      "getVaultWithDetails",
      "getVaultWithDetails(address,uint256):((address[],address[],address[],uint256[],uint256[],uint256[]),uint256,uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_vaultId)
      ]
    );

    return new AutoGamma__getVaultWithDetailsResult(
      result[0].toTuple() as AutoGamma__getVaultWithDetailsResultValue0Struct,
      result[1].toBigInt(),
      result[2].toBigInt()
    ) as AutoGamma__getVaultWithDetailsResult;
  }

  try_getVaultWithDetails(
    _owner: Address,
    _vaultId: BigInt
  ): ethereum.CallResult<AutoGamma__getVaultWithDetailsResult> {
    let result = super.tryCall(
      "getVaultWithDetails",
      "getVaultWithDetails(address,uint256):((address[],address[],address[],uint256[],uint256[],uint256[]),uint256,uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_vaultId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AutoGamma__getVaultWithDetailsResult(
        value[0].toTuple() as AutoGamma__getVaultWithDetailsResultValue0Struct,
        value[1].toBigInt(),
        value[2].toBigInt()
      ) as AutoGamma__getVaultWithDetailsResult
    );
  }

  hasExpiredAndSettlementAllowed(_otoken: Address): boolean {
    let result = super.call(
      "hasExpiredAndSettlementAllowed",
      "hasExpiredAndSettlementAllowed(address):(bool)",
      [ethereum.Value.fromAddress(_otoken)]
    );

    return result[0].toBoolean();
  }

  try_hasExpiredAndSettlementAllowed(
    _otoken: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasExpiredAndSettlementAllowed",
      "hasExpiredAndSettlementAllowed(address):(bool)",
      [ethereum.Value.fromAddress(_otoken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAutomatorEnabled(): boolean {
    let result = super.call(
      "isAutomatorEnabled",
      "isAutomatorEnabled():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isAutomatorEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAutomatorEnabled",
      "isAutomatorEnabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOperatorOf(_owner: Address): boolean {
    let result = super.call("isOperatorOf", "isOperatorOf(address):(bool)", [
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toBoolean();
  }

  try_isOperatorOf(_owner: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOperatorOf", "isOperatorOf(address):(bool)", [
      ethereum.Value.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPairAllowed(_token0: Address, _token1: Address): boolean {
    let result = super.call(
      "isPairAllowed",
      "isPairAllowed(address,address):(bool)",
      [ethereum.Value.fromAddress(_token0), ethereum.Value.fromAddress(_token1)]
    );

    return result[0].toBoolean();
  }

  try_isPairAllowed(
    _token0: Address,
    _token1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isPairAllowed",
      "isPairAllowed(address,address):(bool)",
      [ethereum.Value.fromAddress(_token0), ethereum.Value.fromAddress(_token1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isSettlementAllowed(_otoken: Address): boolean {
    let result = super.call(
      "isSettlementAllowed",
      "isSettlementAllowed(address):(bool)",
      [ethereum.Value.fromAddress(_otoken)]
    );

    return result[0].toBoolean();
  }

  try_isSettlementAllowed(_otoken: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isSettlementAllowed",
      "isSettlementAllowed(address):(bool)",
      [ethereum.Value.fromAddress(_otoken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidVaultId(_owner: Address, _vaultId: BigInt): boolean {
    let result = super.call(
      "isValidVaultId",
      "isValidVaultId(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_vaultId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isValidVaultId(
    _owner: Address,
    _vaultId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidVaultId",
      "isValidVaultId(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_vaultId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWhitelistedOtoken(_otoken: Address): boolean {
    let result = super.call(
      "isWhitelistedOtoken",
      "isWhitelistedOtoken(address):(bool)",
      [ethereum.Value.fromAddress(_otoken)]
    );

    return result[0].toBoolean();
  }

  try_isWhitelistedOtoken(_otoken: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWhitelistedOtoken",
      "isWhitelistedOtoken(address):(bool)",
      [ethereum.Value.fromAddress(_otoken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  orders(param0: BigInt): AutoGamma__ordersResult {
    let result = super.call(
      "orders",
      "orders(uint256):(address,address,uint256,uint256,bool,address,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new AutoGamma__ordersResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean(),
      result[5].toAddress(),
      result[6].toBigInt(),
      result[7].toBoolean()
    );
  }

  try_orders(param0: BigInt): ethereum.CallResult<AutoGamma__ordersResult> {
    let result = super.tryCall(
      "orders",
      "orders(uint256):(address,address,uint256,uint256,bool,address,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AutoGamma__ordersResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean(),
        value[5].toAddress(),
        value[6].toBigInt(),
        value[7].toBoolean()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  redeemFee(): BigInt {
    let result = super.call("redeemFee", "redeemFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_redeemFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("redeemFee", "redeemFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  settleFee(): BigInt {
    let result = super.call("settleFee", "settleFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_settleFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("settleFee", "settleFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  shouldProcessOrder(_orderId: BigInt): boolean {
    let result = super.call(
      "shouldProcessOrder",
      "shouldProcessOrder(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_orderId)]
    );

    return result[0].toBoolean();
  }

  try_shouldProcessOrder(_orderId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "shouldProcessOrder",
      "shouldProcessOrder(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_orderId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  shouldRedeemOtoken(
    _owner: Address,
    _otoken: Address,
    _amount: BigInt
  ): boolean {
    let result = super.call(
      "shouldRedeemOtoken",
      "shouldRedeemOtoken(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_otoken),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_shouldRedeemOtoken(
    _owner: Address,
    _otoken: Address,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "shouldRedeemOtoken",
      "shouldRedeemOtoken(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_otoken),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  shouldSettleVault(_owner: Address, _vaultId: BigInt): boolean {
    let result = super.call(
      "shouldSettleVault",
      "shouldSettleVault(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_vaultId)
      ]
    );

    return result[0].toBoolean();
  }

  try_shouldSettleVault(
    _owner: Address,
    _vaultId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "shouldSettleVault",
      "shouldSettleVault(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_vaultId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  uniPair(param0: Address, param1: Address): boolean {
    let result = super.call("uniPair", "uniPair(address,address):(bool)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toBoolean();
  }

  try_uniPair(param0: Address, param1: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("uniPair", "uniPair(address,address):(bool)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  uniRouter(): Address {
    let result = super.call("uniRouter", "uniRouter():(address)", []);

    return result[0].toAddress();
  }

  try_uniRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall("uniRouter", "uniRouter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  whitelist(): Address {
    let result = super.call("whitelist", "whitelist():(address)", []);

    return result[0].toAddress();
  }

  try_whitelist(): ethereum.CallResult<Address> {
    let result = super.tryCall("whitelist", "whitelist():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _gammaAddressBook(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _uniRouter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _automator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _automatorTreasury(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AllowPairCall extends ethereum.Call {
  get inputs(): AllowPairCall__Inputs {
    return new AllowPairCall__Inputs(this);
  }

  get outputs(): AllowPairCall__Outputs {
    return new AllowPairCall__Outputs(this);
  }
}

export class AllowPairCall__Inputs {
  _call: AllowPairCall;

  constructor(call: AllowPairCall) {
    this._call = call;
  }

  get _token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AllowPairCall__Outputs {
  _call: AllowPairCall;

  constructor(call: AllowPairCall) {
    this._call = call;
  }
}

export class CancelOrderCall extends ethereum.Call {
  get inputs(): CancelOrderCall__Inputs {
    return new CancelOrderCall__Inputs(this);
  }

  get outputs(): CancelOrderCall__Outputs {
    return new CancelOrderCall__Outputs(this);
  }
}

export class CancelOrderCall__Inputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }

  get _orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelOrderCall__Outputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }
}

export class CreateOrderCall extends ethereum.Call {
  get inputs(): CreateOrderCall__Inputs {
    return new CreateOrderCall__Inputs(this);
  }

  get outputs(): CreateOrderCall__Outputs {
    return new CreateOrderCall__Outputs(this);
  }
}

export class CreateOrderCall__Inputs {
  _call: CreateOrderCall;

  constructor(call: CreateOrderCall) {
    this._call = call;
  }

  get _otoken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _vaultId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _toToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class CreateOrderCall__Outputs {
  _call: CreateOrderCall;

  constructor(call: CreateOrderCall) {
    this._call = call;
  }
}

export class DisallowPairCall extends ethereum.Call {
  get inputs(): DisallowPairCall__Inputs {
    return new DisallowPairCall__Inputs(this);
  }

  get outputs(): DisallowPairCall__Outputs {
    return new DisallowPairCall__Outputs(this);
  }
}

export class DisallowPairCall__Inputs {
  _call: DisallowPairCall;

  constructor(call: DisallowPairCall) {
    this._call = call;
  }

  get _token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DisallowPairCall__Outputs {
  _call: DisallowPairCall;

  constructor(call: DisallowPairCall) {
    this._call = call;
  }
}

export class HarvestCall extends ethereum.Call {
  get inputs(): HarvestCall__Inputs {
    return new HarvestCall__Inputs(this);
  }

  get outputs(): HarvestCall__Outputs {
    return new HarvestCall__Outputs(this);
  }
}

export class HarvestCall__Inputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class HarvestCall__Outputs {
  _call: HarvestCall;

  constructor(call: HarvestCall) {
    this._call = call;
  }
}

export class ProcessOrderCall extends ethereum.Call {
  get inputs(): ProcessOrderCall__Inputs {
    return new ProcessOrderCall__Inputs(this);
  }

  get outputs(): ProcessOrderCall__Outputs {
    return new ProcessOrderCall__Outputs(this);
  }
}

export class ProcessOrderCall__Inputs {
  _call: ProcessOrderCall;

  constructor(call: ProcessOrderCall) {
    this._call = call;
  }

  get _orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get orderArgs(): ProcessOrderCallOrderArgsStruct {
    return this._call.inputValues[1].value.toTuple() as ProcessOrderCallOrderArgsStruct;
  }
}

export class ProcessOrderCall__Outputs {
  _call: ProcessOrderCall;

  constructor(call: ProcessOrderCall) {
    this._call = call;
  }
}

export class ProcessOrderCallOrderArgsStruct extends ethereum.Tuple {
  get swapAmountOutMin(): BigInt {
    return this[0].toBigInt();
  }

  get swapPath(): Array<Address> {
    return this[1].toAddressArray();
  }
}

export class ProcessOrdersCall extends ethereum.Call {
  get inputs(): ProcessOrdersCall__Inputs {
    return new ProcessOrdersCall__Inputs(this);
  }

  get outputs(): ProcessOrdersCall__Outputs {
    return new ProcessOrdersCall__Outputs(this);
  }
}

export class ProcessOrdersCall__Inputs {
  _call: ProcessOrdersCall;

  constructor(call: ProcessOrdersCall) {
    this._call = call;
  }

  get _orderIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _orderArgs(): Array<ProcessOrdersCall_orderArgsStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      ProcessOrdersCall_orderArgsStruct
    >();
  }
}

export class ProcessOrdersCall__Outputs {
  _call: ProcessOrdersCall;

  constructor(call: ProcessOrdersCall) {
    this._call = call;
  }
}

export class ProcessOrdersCall_orderArgsStruct extends ethereum.Tuple {
  get swapAmountOutMin(): BigInt {
    return this[0].toBigInt();
  }

  get swapPath(): Array<Address> {
    return this[1].toAddressArray();
  }
}

export class RefreshConfigCall extends ethereum.Call {
  get inputs(): RefreshConfigCall__Inputs {
    return new RefreshConfigCall__Inputs(this);
  }

  get outputs(): RefreshConfigCall__Outputs {
    return new RefreshConfigCall__Outputs(this);
  }
}

export class RefreshConfigCall__Inputs {
  _call: RefreshConfigCall;

  constructor(call: RefreshConfigCall) {
    this._call = call;
  }
}

export class RefreshConfigCall__Outputs {
  _call: RefreshConfigCall;

  constructor(call: RefreshConfigCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAddressBookCall extends ethereum.Call {
  get inputs(): SetAddressBookCall__Inputs {
    return new SetAddressBookCall__Inputs(this);
  }

  get outputs(): SetAddressBookCall__Outputs {
    return new SetAddressBookCall__Outputs(this);
  }
}

export class SetAddressBookCall__Inputs {
  _call: SetAddressBookCall;

  constructor(call: SetAddressBookCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAddressBookCall__Outputs {
  _call: SetAddressBookCall;

  constructor(call: SetAddressBookCall) {
    this._call = call;
  }
}

export class SetAutomatorCall extends ethereum.Call {
  get inputs(): SetAutomatorCall__Inputs {
    return new SetAutomatorCall__Inputs(this);
  }

  get outputs(): SetAutomatorCall__Outputs {
    return new SetAutomatorCall__Outputs(this);
  }
}

export class SetAutomatorCall__Inputs {
  _call: SetAutomatorCall;

  constructor(call: SetAutomatorCall) {
    this._call = call;
  }

  get _automator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAutomatorCall__Outputs {
  _call: SetAutomatorCall;

  constructor(call: SetAutomatorCall) {
    this._call = call;
  }
}

export class SetAutomatorTreasuryCall extends ethereum.Call {
  get inputs(): SetAutomatorTreasuryCall__Inputs {
    return new SetAutomatorTreasuryCall__Inputs(this);
  }

  get outputs(): SetAutomatorTreasuryCall__Outputs {
    return new SetAutomatorTreasuryCall__Outputs(this);
  }
}

export class SetAutomatorTreasuryCall__Inputs {
  _call: SetAutomatorTreasuryCall;

  constructor(call: SetAutomatorTreasuryCall) {
    this._call = call;
  }

  get _automatorTreasury(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAutomatorTreasuryCall__Outputs {
  _call: SetAutomatorTreasuryCall;

  constructor(call: SetAutomatorTreasuryCall) {
    this._call = call;
  }
}

export class SetRedeemFeeCall extends ethereum.Call {
  get inputs(): SetRedeemFeeCall__Inputs {
    return new SetRedeemFeeCall__Inputs(this);
  }

  get outputs(): SetRedeemFeeCall__Outputs {
    return new SetRedeemFeeCall__Outputs(this);
  }
}

export class SetRedeemFeeCall__Inputs {
  _call: SetRedeemFeeCall;

  constructor(call: SetRedeemFeeCall) {
    this._call = call;
  }

  get _redeemFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRedeemFeeCall__Outputs {
  _call: SetRedeemFeeCall;

  constructor(call: SetRedeemFeeCall) {
    this._call = call;
  }
}

export class SetSettleFeeCall extends ethereum.Call {
  get inputs(): SetSettleFeeCall__Inputs {
    return new SetSettleFeeCall__Inputs(this);
  }

  get outputs(): SetSettleFeeCall__Outputs {
    return new SetSettleFeeCall__Outputs(this);
  }
}

export class SetSettleFeeCall__Inputs {
  _call: SetSettleFeeCall;

  constructor(call: SetSettleFeeCall) {
    this._call = call;
  }

  get _settleFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSettleFeeCall__Outputs {
  _call: SetSettleFeeCall;

  constructor(call: SetSettleFeeCall) {
    this._call = call;
  }
}

export class SetUniRouterCall extends ethereum.Call {
  get inputs(): SetUniRouterCall__Inputs {
    return new SetUniRouterCall__Inputs(this);
  }

  get outputs(): SetUniRouterCall__Outputs {
    return new SetUniRouterCall__Outputs(this);
  }
}

export class SetUniRouterCall__Inputs {
  _call: SetUniRouterCall;

  constructor(call: SetUniRouterCall) {
    this._call = call;
  }

  get _uniRouter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetUniRouterCall__Outputs {
  _call: SetUniRouterCall;

  constructor(call: SetUniRouterCall) {
    this._call = call;
  }
}

export class StartAutomatorCall extends ethereum.Call {
  get inputs(): StartAutomatorCall__Inputs {
    return new StartAutomatorCall__Inputs(this);
  }

  get outputs(): StartAutomatorCall__Outputs {
    return new StartAutomatorCall__Outputs(this);
  }
}

export class StartAutomatorCall__Inputs {
  _call: StartAutomatorCall;

  constructor(call: StartAutomatorCall) {
    this._call = call;
  }

  get _resolver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class StartAutomatorCall__Outputs {
  _call: StartAutomatorCall;

  constructor(call: StartAutomatorCall) {
    this._call = call;
  }
}

export class StopAutomatorCall extends ethereum.Call {
  get inputs(): StopAutomatorCall__Inputs {
    return new StopAutomatorCall__Inputs(this);
  }

  get outputs(): StopAutomatorCall__Outputs {
    return new StopAutomatorCall__Outputs(this);
  }
}

export class StopAutomatorCall__Inputs {
  _call: StopAutomatorCall;

  constructor(call: StopAutomatorCall) {
    this._call = call;
  }
}

export class StopAutomatorCall__Outputs {
  _call: StopAutomatorCall;

  constructor(call: StopAutomatorCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawFundCall extends ethereum.Call {
  get inputs(): WithdrawFundCall__Inputs {
    return new WithdrawFundCall__Inputs(this);
  }

  get outputs(): WithdrawFundCall__Outputs {
    return new WithdrawFundCall__Outputs(this);
  }
}

export class WithdrawFundCall__Inputs {
  _call: WithdrawFundCall;

  constructor(call: WithdrawFundCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawFundCall__Outputs {
  _call: WithdrawFundCall;

  constructor(call: WithdrawFundCall) {
    this._call = call;
  }
}
